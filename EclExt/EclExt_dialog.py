# -*- coding: utf-8 -*-

"""
/***************************************************************************
 LightPollutionToolbox
                                 A QGIS plugin
 Light pollution indicators (focus on public lighting)
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2020-04-20
        copyright            : (C) 2020 by Mathieu Chailloux
        email                : mathieu@chailloux.org
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
import sys
import traceback
from io import StringIO
import locale

from PyQt5 import uic
from PyQt5 import QtWidgets
from qgis.gui import QgsFileWidget

from .EclExt_model import FieldRename, FieldMapping

file_dir = os.path.dirname(__file__)
if file_dir not in sys.path:
    sys.path.append(file_dir)
    
FORM_CLASS, _ = uic.loadUiType(os.path.join(
 os.path.dirname(__file__), 'std_eclext.ui'))
    
class EclExtDialog(QtWidgets.QDialog,FORM_CLASS):

    def __init__(self, parent=None):
        """Constructor."""
        super().__init__(parent)
        #super().__init__()
        # Set up the user interface from Designer.
        # After setupUI you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        self.fields = []
        self.addField('modele',self.modelField)
        self.addField('marque',self.brandField)
        self.addField('typeInstallation',self.installTypeField,self.installTypeView)
        self.addField('typeSource',self.sourceTypeField,self.sourceTypeView)
        self.addField('eclairagePublic',self.publicField,self.publicView)
        
    def addField(self,fieldName,fieldWidget,mappingView=None):
        if mappingView:
            field = FieldMapping(fieldName,fieldWidget,self.layerCombo,mappingView)
        else:
            field = FieldRename(fieldName,fieldWidget,self.layerCombo)
        self.fields.append(field)
        
    # Initialize Graphic elements for each tab
    def initGui(self):
        pass
        
    # Connects view and model components for each tab.
    # Connects global elements such as project file and language management.
    def connectComponents(self):
        for f in self.fields:
            f.connectComponents()
        
    def tr(self, message):
        return QCoreApplication.translate('EclExtDialog', message)
