# -*- coding: utf-8 -*-

"""
/***************************************************************************
 LightPollutionToolbox
                                 A QGIS plugin
 Light pollution indicators (focus on public lighting)
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2020-04-20
        copyright            : (C) 2020 by Mathieu Chailloux
        email                : mathieu@chailloux.org
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Mathieu Chailloux'
__date__ = '2020-04-20'
__copyright__ = '(C) 2020 by Mathieu Chailloux'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

import os
import sys
import inspect

from qgis.core import QgsProcessingAlgorithm, QgsApplication, QgsProcessingException
from .algs.LightPollutionToolbox_provider import LightPollutionToolboxProvider
from PyQt5.QtCore import QTranslator, qVersion, QCoreApplication
from PyQt5.QtGui import QIcon
from PyQt5.QtWidgets import QAction

from .qgis_lib_mc import utils
from .EclExt.EclExt_dialog import EclExtDialog

cmd_folder = os.path.split(inspect.getfile(inspect.currentframe()))[0]

if cmd_folder not in sys.path:
    sys.path.insert(0, cmd_folder)


class LightPollutionToolboxPlugin(object):

    def __init__(self,iface):
        self.provider = None
        self.iface = iface
        self.actions = []
        self.menu = self.tr(u'&LPT')
        self.toolbar = self.iface.addToolBar(u'LPT')
        self.toolbar.setObjectName(u'LPT')
        
    # def icon(self):
        # cmd_folder = os.path.split(inspect.getfile(inspect.currentframe()))[0]
        # icon = QIcon(os.path.join(os.path.join(cmd_folder, 'lamp.png')))
        # return icon
        
    def tr(self, message):
        return QCoreApplication.translate('LightPollutionToolboxPlugin', message)

    def initProcessing(self):
        """Init Processing provider for QGIS >= 3.8."""
        self.provider = LightPollutionToolboxProvider()
        QgsApplication.processingRegistry().addProvider(self.provider)

    def initGui(self):
        icon_path = ':/plugins/LightPollutionToolbox/lamp.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Standardisation EclExt'),
            callback=self.runEclExt,
            parent=self.iface.mainWindow())
        self.iface.mainWindow()
            
        if QgsApplication.locale() in ['fr','FR']:
            self.switchLang('fr')
        utils.print_func = utils.doNothing
        self.initProcessing()
        
    def runEclExt(self):
        """Run method that performs all the real work"""
        # show the dialog
        std_dlg = EclExtDialog()
        std_dlg.initGui()
        std_dlg.connectComponents()
        std_dlg.show()
        # Run the dialog event loop
        result = std_dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass
            
        
        # Switch language to english.
    def switchLang(self,lang):
        #assert(False)
        plugin_dir = os.path.dirname(__file__)
        lang_path = os.path.join(plugin_dir,'i18n','LightPollutionToolbox_' + lang + '.qm')
        if os.path.exists(lang_path):
            #assert(False)
            self.translator = QTranslator()
            self.translator.load(lang_path)
            if qVersion() > '4.3.3':
                #assert(False)
                print(lang_path)
                QCoreApplication.installTranslator(self.translator)
            else:
                return
        else:
            raise QgsProcessingException("No translation file : " + str(en_path))

    def unload(self):
        QgsApplication.processingRegistry().removeProvider(self.provider)

    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action